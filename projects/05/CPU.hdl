/*
This file is part of www.nand2tetris.org and the book "The Elements of
Computing Systems" by Nisan and Schocken, MIT Press.
File name: projects/05/CPU.hdl

The Hack CPU (Central Processing unit), consisting of an ALU, two registers
named A and D, and a program counter named PC.

The CPU is designed to fetch and execute instructions written in the Hack
machine language. In particular, it functions as follows:

* Executes the inputted instruction according to the Hack machine
  language specification. The D and A in the language specification
  refer to CPU-resident registers, while M refers to the external
  memory location addressed by A, i.e. to Memory[A]. The inM input
  holds the value of this location.
* If the current instruction needs to write a value to M, the value is placed
  in outM, the address of the target location is placed in the addressM output,
  and the writeM control bit is asserted. (When writeM==0, any value may appear
  in outM). The outM and writeM outputs are combinational: they are affected
  instantaneously by the execution of the current instruction.
* The addressM and pc outputs are clocked: although they are affected by the
  execution of the current instruction, they commit to their new values only in
  the next time step.
* If reset==1 then the CPU jumps to address 0 (i.e. pc is set to 0 in next time
  step) rather than to the address resulting from executing the current
  instruction.

/*

This file is part of www.nand2tetris.org and the book "The Elements of
Computing Systems" by Nisan and Schocken, MIT Press.
File name: projects/05/Control.hdl

This chip decodes computer instructions.

p.94

Inputs:
  * the instruction to be decoded
  * something from the ALU? (jump?)

Outputs:
  * isAddress: true if this is an A instruction
  * isCompute: true if this is an C instruction
  * something to select between A and M as input to the ALU?
  * address to the A register?
  * address to the D register?
  * the compute commands to the ALU
  * something in to the PC? Increment? Load?
  * writeM

*/

CHIP CPU {

  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
    // decode the instruction into components
    And(a=instruction[16], b=true, out=IsCInstruction);
    Not(in=IsCInstruction, out=IsAInstruction);
    And16(a=instruction, b[0..15]=true, out[15]=iBit, out[0..14]=vBus,
          out[12]=aBit, out[6..11]=cBus, out[3..5]=dBus,
          out[0..2]=jBus);

    // A register input mux
    Mux16(a=, b=instruction, sel=instruction[5], out=);

    // PC (program counter) register
    PC(in=ARegisterOut, load=jmp, inc=notjmp, reset=reset, out=PCout);

    // A (address) register
    Register(in=AInputMux, load=instruction[5], out=ARegisterOut);

    // A-or-M mux, y-input to ALU
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AMRegister);

    // D (data) register
    Register(in=ALUout, load=instruction[4], out=DRegisterOut)

    // Define ALU connections
    ALU(x=DRegisterOut, y=AMRegister, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ALUzr, ng=ALUng);

    // jump logic:
    // if instruction[2] && ALUng then jump
    // if instruction[1] && ALUzr then jump
    // if instruction[0] && !ALUng && !ALUzr then jump
    And(a=instruction[2], b=ALUng, out=JumpLT);
    And(a=instruction[1], b=ALUzr, out=JumpZR);
    Not(in=ALUng, out=notALUng);
    Not(in=ALUzr, out=notALUzr);
    And(a=notALUng, b=notALUzr, out=ALUpos);
    And(a=instruction[0], b=ALUpos, out=JumpGT);
    Or8Way(in[0]=JumpLT, in[1]=JumpZR, in[2]=JumpGT, in[3..7]=false, out=jmp);
    Not(in=jmp, out=notjmp);



}









}
