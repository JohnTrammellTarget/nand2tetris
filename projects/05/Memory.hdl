/* This file is part of www.nand2tetris.org
 * and the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * File name: projects/05/Memory.hdl
 *
 * This chip defines the complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 *
 * The chip facilitates read and write operations, as follows:
 *     Read: out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 *
 * In words: the chip always outputs the value stored at the memory location
 * specified by address. If load==1, the in value is loaded into the memory
 * location specified by address. This value becomes available through the
 * "out" output from the next time step onward.
 *
 * Address space rules:
 * - Only the upper 16K+8K+1 words of the Memory chip are used.
 * - Access to address>0x6000 is invalid.
 * - Access to any address in the range 0x4000-0x5FFF results in accessing
 *   the screen memory map.
 * - Access to address 0x6000 results in accessing the keyboard memory map.
 * - The behavior in these addresses is described in the Screen and Keyboard
 *   chip specifications given in the book.

Memory map:

0x0000 = 0000 0000 ....    RAM
...
0x3fff = 0011 1111 ....    RAM
0x4000 = 0100 0000 ....    SCREEN
0x4001 = 0100 0000 ....    SCREEN
...
0x5fff = 0101 1111 ....    SCREEN
0x6000 = 0110 0000 ....    KBD

address[0..14]

    if address[14] is low, then it's RAM
    else if address[13] is low, then it's screen
    else it's KBD

*/

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    /* calculate some helper booleans */
    Not(in=address[14], out=is_ram);
    And(a=address[13], b=address[14], out=is_kbd);
    Not(in=is_kbd, out=is_not_kbd);
    And(a=address[14], b=is_not_kbd, out=is_screen);

    /* calculate load_x circuits */
    And(a=is_ram, b=load, out=load_ram);
    And(a=is_screen, b=load, out=load_screen);

    RAM16K(in=in, load=load_ram, address=address, out=ram_out);
    Screen(in=in, load=load_screen, address=address, out=screen_out);
    Keyboard(out=kbd_out);

    /* add Mux so there's only one output */
    Mux4Way16(a=ram_out, c=screen_out, d=kbd_out, sel=address[13..14], out=out);
}
